name: ISP Management Platform CI/CD

on:
  push:
    branches: [ main, develop, 'release/*' ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: isp_management_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      elasticsearch:
        image: docker.elastic.co/elasticsearch/elasticsearch:8.9.0
        env:
          discovery.type: single-node
          xpack.security.enabled: false
          ES_JAVA_OPTS: -Xms512m -Xmx512m
        ports:
          - 9200:9200
        options: >-
          --health-cmd "curl -f http://localhost:9200/_cluster/health || exit 1"
          --health-interval 30s
          --health-timeout 10s
          --health-retries 3

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov
    
    - name: Run database migrations
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/isp_management_test
        REDIS_URL: redis://localhost:6379/0
        ELASTICSEARCH_HOSTS: http://localhost:9200
        ELASTICSEARCH_ENABLED: true
        JWT_SECRET_KEY: test_secret_key
        JWT_ALGORITHM: HS256
        ENVIRONMENT: testing
      run: |
        python -m alembic upgrade head
    
    - name: Run tests
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/isp_management_test
        REDIS_URL: redis://localhost:6379/0
        ELASTICSEARCH_HOSTS: http://localhost:9200
        ELASTICSEARCH_ENABLED: true
        JWT_SECRET_KEY: test_secret_key
        JWT_ALGORITHM: HS256
        ENVIRONMENT: testing
      run: |
        pytest --cov=. --cov-report=xml
    
    - name: Upload coverage report
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black flake8 isort mypy
    
    - name: Run linters
      run: |
        black --check .
        flake8 .
        isort --check-only --profile black .
        mypy .

  build-and-push:
    needs: [test, lint]
    runs-on: ubuntu-latest
    # Only run this job on pushes to main, develop or release branches
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || startsWith(github.ref, 'refs/heads/release/'))
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Extract branch name
      id: extract_branch
      shell: bash
      run: echo "branch=${GITHUB_REF#refs/heads/}" >> $GITHUB_OUTPUT
    
    - name: Set Docker image tags
      id: set_tags
      run: |
        BRANCH_NAME=${{ steps.extract_branch.outputs.branch }}
        if [ "$BRANCH_NAME" == "main" ]; then
          echo "tag=latest" >> $GITHUB_OUTPUT
        elif [ "$BRANCH_NAME" == "develop" ]; then
          echo "tag=develop" >> $GITHUB_OUTPUT
        elif [[ "$BRANCH_NAME" == release/* ]]; then
          VERSION=${BRANCH_NAME#release/}
          echo "tag=$VERSION" >> $GITHUB_OUTPUT
        fi
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: mike12j/isp-management:${{ steps.set_tags.outputs.tag }}

  deploy-staging:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    
    steps:
    - name: Deploy to staging environment
      # This step would use SSH or another deployment method to update your staging environment
      run: |
        echo "Deploying to staging environment"
        # Add your deployment commands here

  deploy-production:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Deploy to production environment
      # This step would use SSH or another deployment method to update your production environment
      run: |
        echo "Deploying to production environment"
        # Add your deployment commands here
