name: Service Monitoring CI

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'modules/monitoring/**'
      - 'tests/modules/monitoring/**'
      - 'migrations/versions/002_add_service_monitoring_tables.py'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'modules/monitoring/**'
      - 'tests/modules/monitoring/**'
      - 'migrations/versions/002_add_service_monitoring_tables.py'

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: isp_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:6
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      elasticsearch:
        image: docker.elastic.co/elasticsearch/elasticsearch:7.10.0
        env:
          discovery.type: single-node
          ES_JAVA_OPTS: -Xms512m -Xmx512m
        ports:
          - 9200:9200
        options: >-
          --health-cmd "curl -s http://localhost:9200/_cluster/health"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10

    steps:
    - uses: actions/checkout@v2
    
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov
    
    - name: Set up environment variables
      run: |
        echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/isp_test" >> $GITHUB_ENV
        echo "ELASTICSEARCH_HOSTS=http://localhost:9200" >> $GITHUB_ENV
        echo "REDIS_URL=redis://localhost:6379/1" >> $GITHUB_ENV
        echo "SERVICE_CHECK_INTERVAL=60" >> $GITHUB_ENV
        echo "OUTAGE_DETECTION_THRESHOLD=3" >> $GITHUB_ENV
        echo "SERVICE_CHECK_TIMEOUT=5" >> $GITHUB_ENV
        echo "TESTING=True" >> $GITHUB_ENV
    
    - name: Run database migrations
      run: |
        python scripts/run_migrations.py
    
    - name: Run unit tests
      run: |
        python -m pytest tests/modules/monitoring -v
    
    - name: Run integration tests
      run: |
        python scripts/test_service_monitoring_integration.py -v
    
    - name: Generate coverage report
      run: |
        python -m pytest tests/modules/monitoring --cov=modules.monitoring --cov-report=xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v1
      with:
        file: ./coverage.xml
        flags: monitoring
        name: codecov-monitoring
        fail_ci_if_error: false
    
    - name: Archive test results
      uses: actions/upload-artifact@v2
      with:
        name: test-results
        path: |
          coverage.xml
          .coverage
          htmlcov/

  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort
    
    - name: Lint with flake8
      run: |
        flake8 modules/monitoring --count --select=E9,F63,F7,F82 --show-source --statistics
    
    - name: Check formatting with black
      run: |
        black --check modules/monitoring
    
    - name: Check imports with isort
      run: |
        isort --check-only --profile black modules/monitoring
