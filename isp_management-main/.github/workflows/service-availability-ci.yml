name: Service Availability Monitoring CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'modules/monitoring/**'
      - 'tests/modules/monitoring/**'
      - '.github/workflows/service-availability-ci.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'modules/monitoring/**'
      - 'tests/modules/monitoring/**'
      - '.github/workflows/service-availability-ci.yml'

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_isp_management
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      elasticsearch:
        image: docker.elastic.co/elasticsearch/elasticsearch:7.14.0
        env:
          discovery.type: single-node
          ES_JAVA_OPTS: -Xms512m -Xmx512m
        ports:
          - 9200:9200
        options: >-
          --health-cmd "curl -s http://localhost:9200/_cluster/health | grep -q '\"status\":\"green\"\\|\"status\":\"yellow\"'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10

    steps:
    - uses: actions/checkout@v2
    
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Lint with flake8
      run: |
        flake8 modules/monitoring/ tests/modules/monitoring/ --count --select=E9,F63,F7,F82 --show-source --statistics
    
    - name: Test with pytest
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_isp_management
        ELASTICSEARCH_HOSTS: http://localhost:9200
      run: |
        pytest tests/modules/monitoring/test_service_availability.py -v
    
    - name: Upload test results
      uses: actions/upload-artifact@v2
      with:
        name: test-results
        path: test-results/
      if: always()

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    steps:
    - uses: actions/checkout@v2
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
    
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Build and push
      uses: docker/build-push-action@v2
      with:
        context: .
        file: ./docker/Dockerfile
        push: true
        tags: |
          ghcr.io/${{ github.repository }}/isp-management-monitoring:${{ github.sha }}
          ghcr.io/${{ github.repository }}/isp-management-monitoring:latest
    
    - name: Update deployment status
      run: |
        echo "Deployment status updated"

  deploy-staging:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    
    steps:
    - uses: actions/checkout@v2
    
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment"
        # Add deployment scripts here
    
    - name: Run integration tests
      run: |
        echo "Running integration tests in staging"
        # Add integration test scripts here

  deploy-production:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - uses: actions/checkout@v2
    
    - name: Deploy to production
      run: |
        echo "Deploying to production environment"
        # Add production deployment scripts here
    
    - name: Verify deployment
      run: |
        echo "Verifying production deployment"
        # Add verification scripts here
